openapi: 3.0.3
info:
  title: RiverAlert API
  description: Real-time flood monitoring and alert system API
  version: 1.0.0
  contact:
    name: The AI Cowboys
    email: contact_us@theaicowboys.com
    url: https://www.theaicowboys.com
  license:
    name: MIT

servers:
  - url: https://api.riveralert.com/v1
    description: Production server
  - url: http://localhost:3001/v1
    description: Development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /alerts:
    get:
      summary: List active flood alerts
      operationId: getAlerts
      tags:
        - Alerts
      parameters:
        - in: query
          name: bbox
          schema:
            type: string
            pattern: '^-?\d+\.?\d*,-?\d+\.?\d*,-?\d+\.?\d*,-?\d+\.?\d*$'
          description: Bounding box (minLon,minLat,maxLon,maxLat)
          example: "-98.6,29.3,-98.3,29.6"
        - in: query
          name: severity
          schema:
            type: string
            enum: [low, moderate, high, extreme]
        - in: query
          name: active
          schema:
            type: boolean
            default: true
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
              example:
                data:
                  - id: "alrt_7f3a9c2d"
                    crossing_id: "crx_42"
                    severity: "high"
                    water_level_ft: 7.3
                    message: "High water at Salado Creek"
                    issued_at: "2025-09-13T14:03:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /readings:
    post:
      summary: Submit sensor reading
      operationId: createReading
      tags:
        - Readings
      security:
        - HmacAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingInput'
      responses:
        '201':
          description: Reading accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reading'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /crossings:
    get:
      summary: List monitored crossings
      operationId: getCrossings
      tags:
        - Crossings
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [open, closed, caution]
      responses:
        '200':
          description: List of crossings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Crossing'

  /routes:
    get:
      summary: Get safe route avoiding floods
      operationId: getSafeRoute
      tags:
        - Routing
      parameters:
        - in: query
          name: origin
          required: true
          schema:
            type: string
          example: "29.4241,-98.4936"
        - in: query
          name: destination
          required: true
          schema:
            type: string
          example: "29.5074,-98.4516"
        - in: query
          name: avoid_floods
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Safe route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'

  /health:
    get:
      summary: System health check
      operationId: getHealth
      tags:
        - System
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /admin/realtime:
    get:
      summary: Realtime system metrics
      operationId: getRealtimeMetrics
      tags:
        - Admin
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Realtime metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  connections:
                    type: integer
                  channels:
                    type: integer
                  messagesPerSecond:
                    type: number
                  avgLatency:
                    type: number
                  uptime:
                    type: number

components:
  schemas:
    Alert:
      type: object
      required:
        - id
        - severity
        - message
        - issued_at
      properties:
        id:
          type: string
        crossing_id:
          type: string
        severity:
          type: string
          enum: [low, moderate, high, extreme]
        water_level_ft:
          type: number
        message:
          type: string
        location:
          $ref: '#/components/schemas/GeoPoint'
        issued_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    Reading:
      type: object
      required:
        - id
        - sensor_id
        - water_level_ft
        - timestamp
      properties:
        id:
          type: string
        sensor_id:
          type: string
        water_level_ft:
          type: number
        timestamp:
          type: string
          format: date-time
        quality_score:
          type: number

    ReadingInput:
      type: object
      required:
        - sensor_id
        - water_level_ft
        - timestamp
      properties:
        sensor_id:
          type: string
        water_level_ft:
          type: number
        timestamp:
          type: string
          format: date-time
        battery_voltage:
          type: number
        signal_strength:
          type: integer

    Crossing:
      type: object
      required:
        - id
        - name
        - location
        - status
      properties:
        id:
          type: string
        name:
          type: string
        location:
          $ref: '#/components/schemas/GeoPoint'
        status:
          type: string
          enum: [open, closed, caution]
        current_level_ft:
          type: number
        flood_stage_ft:
          type: number

    Route:
      type: object
      properties:
        origin:
          type: array
          items:
            type: number
        destination:
          type: array
          items:
            type: number
        distance_km:
          type: number
        duration_minutes:
          type: integer
        polyline:
          type: string
        waze_deeplink:
          type: string

    GeoPoint:
      type: object
      properties:
        type:
          type: string
          enum: [Point]
        coordinates:
          type: array
          items:
            type: number

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        services:
          type: object

    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    HmacAuth:
      type: apiKey
      in: header
      name: X-HMAC-Signature